📘 Recursion in Python – Simplified Notes
🧠 What is Recursion?
Recursion is a programming technique where a function calls itself to solve smaller instances of a problem.

It’s different from traditional code flow and might seem tricky at first.

Recursion helps solve complex problems by breaking them down into simpler sub-problems.

🚀 Why is Recursion Important in DSA?
It is fundamental in solving many problems in Data Structures:

Trees (preorder, inorder, postorder traversal)

Linked Lists

Stack, Queue

Graph algorithms (DFS)

Forms the foundation of Dynamic Programming (DP).

Most DP problems use recursion + memoization.

Asked in interviews at top companies (Google, Amazon, Goldman Sachs).

🔥 Common Issues Learners Face
Hard to visualize the flow.

Difficult to trace what happens in memory (function calls, returns).

Students often skip the core intuition, leading to struggles in DP.

🧩 Key Concepts to Understand Recursion
Functions Can Call Other Functions

Example: Function A() can call B().

This is common and is the building block of recursion.

Functions Can Call Themselves

This is recursion.

Example: def recurse(): recurse()

Function Call Stack (Memory Behavior)

When a function is called, Python creates a frame in memory for it.

The function stays in memory until it completes its task.

After completion, the function’s frame is removed from memory (stack unwinding).

🔄 Simple Demo – Printing Numbers from 5 to 1 Recursively
✅ Traditional Approach
python
Copy
Edit
def print_number(num):
    print(num)

print_number(5)
print_number(4)
print_number(3)
print_number(2)
print_number(1)
Output: 5 4 3 2 1

But here, we called the function multiple times.

🧠 Recursive Thinking
You want to call the function once, and inside it, make it handle the rest.

✅ Recursive Approach (Concept)
python
Copy
Edit
def print_numbers(n):
    if n == 0:
        return
    print(n)
    print_numbers(n - 1)
Called once: print_numbers(5)

Output: 5 4 3 2 1

Base Case: When to stop (i.e., if n == 0).

Recursive Case: Call the function with n - 1.

📊 Visualizing Function Calls (Call Stack)
Let’s see what happens when we call print_numbers(5):

print_numbers(5) → prints 5 → calls print_numbers(4)

print_numbers(4) → prints 4 → calls print_numbers(3)

print_numbers(3) → prints 3 → calls print_numbers(2)

print_numbers(2) → prints 2 → calls print_numbers(1)

print_numbers(1) → prints 1 → calls print_numbers(0)

print_numbers(0) → hits base case → returns

The calls are stored in a stack-like structure. Each function waits for the one it called to finish.

📌 Two Takeaways You Must Remember
A function can call itself or another function.

A function stays in memory until its inner calls finish.

🛠 Tips for Mastering Recursion
Focus on base case (when to stop).

Understand recursive case (how the problem is reduced).

Use visual tools like Python Tutor to trace function calls.

Dry run on paper with sample input.

Practice basic problems:

Print N to 1

Factorial of a number

Fibonacci sequence

Sum of N numbers

✨ Additional Important Concepts (Not Explicitly Covered but Vital)
Tail Recursion vs Head Recursion

Recursion Tree Diagrams (for visual understanding)

Time and Space Complexity in recursive solutions

Stack Overflow risks (infinite recursion without base case)

Memoization (to optimize recursive solutions in DP)

XX

🧪 Example: Print Numbers from 5 to 1 Using Recursion
✅ Recursive Function Without Exit Condition
python
Copy
Edit
def print_num(num):
    print(num)
    print_num(num - 1)
❌ What went wrong?
It keeps calling itself forever (infinite recursion).

You’ll get the error:
RecursionError: maximum recursion depth exceeded

🧱 Why the Error Happens – Stack Memory
🗂️ Memory Model (Call Stack)
Every time a function is called, Python reserves memory for it on the call stack.

If a function keeps calling itself without stopping, memory gets full — causing a stack overflow.

StackOverflow (the website) is named after this kind of error.

🔄 What happens internally?
print_num(5) is called.

It prints 5 and calls print_num(4).

print_num(4) prints 4 and calls print_num(3).

...this continues...

Python can’t stop because there is no condition to exit.

✅ Fixing the Code: Add a Base Condition
To prevent infinite recursion, we add a base case (a stopping condition).

🛠️ Updated Code:
python
Copy
Edit
def print_num(num):
    if num == 0:
        return
    print(num)
    print_num(num - 1)
💡 Explanation:
When num == 0, function returns (exits).

This stops further recursive calls.

Now the function prints: 5 4 3 2 1

XX

What is PMI?
PMI = Principle of Mathematical Induction

A mathematical method to prove statements are true for all natural numbers
Key Insight: Recursion is based on PMI principles!
Once you understand PMI, recursion becomes much easier

PMI: The 3-Step Framework
Step 1: Base Case

Prove the statement is true for the smallest case (usually n=0 or n=1)
Example: Prove 1! = 1 ✓

Step 2: Inductive Hypothesis (ASSUME!)

ASSUME the statement is true for some k (where k < n)
Don't question this assumption - just accept it!
Example: Assume k! works correctly

Step 3: Inductive Step

Using the base case AND the assumption, prove it works for k+1
Example: If k! is correct, then (k+1)! = (k+1) × k! is also correct

PMI Example: Proving Sum Formula
Statement to Prove: Sum of first n numbers = n(n+1)/2
Step 1: Base Case

For n=0: Sum = 0, Formula = 0(0+1)/2 = 0 ✓
For n=1: Sum = 1, Formula = 1(1+1)/2 = 1 ✓

Step 2: Inductive Hypothesis (ASSUME!)

Assume for some k: Sum of first k numbers = k(k+1)/2
We don't prove this - we just assume it's true!

Step 3: Inductive Step

Need to prove: Sum of first (k+1) numbers = (k+1)(k+2)/2
Sum of first (k+1) numbers = (k+1) + Sum of first k numbers
Using our assumption: = (k+1) + k(k+1)/2
Simplifying: = (k+1)(2 + k)/2 = (k+1)(k+2)/2 ✓

Conclusion: By PMI, the formula works for all natural numbers!

XX

Fibonacci(4) Recursion Tree Breakdown
Call Order and Flow:
1. fibonacci(4) [Call #1]
2. └── fibonacci(3) [Call #2] (first call from fibonacci(4))
3.     ├── fibonacci(2) [Call #3] (first call from fibonacci(3))
4.     │   ├── fibonacci(1) [Call #4] → returns 1 (base case)
5.     │   └── fibonacci(0) [Call #5] → returns 0 (base case)
6.     │   └── fibonacci(2) returns 1+0 = 1
7.     └── fibonacci(1) [Call #6] → returns 1 (base case)
8.     └── fibonacci(3) returns 1+1 = 2
9. └── fibonacci(2) [Call #7] (second call from fibonacci(4))
10.    ├── fibonacci(1) [Call #8] → returns 1 (base case)
11.    └── fibonacci(0) [Call #9] → returns 0 (base case)
12.    └── fibonacci(2) returns 1+0 = 1
13. fibonacci(4) returns 2+1 = 3
Key Points to Remember
Execution Order Matters

The tree shows the exact order of function calls
Don't assume both recursive calls happen simultaneously
Follow the code line by line

Base Cases Are Important

Always identify and mark your base cases clearly
These are where the "returning" starts