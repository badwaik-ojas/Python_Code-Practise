🔍 Binary Search Algorithm
✅ Definition
Binary Search is an efficient algorithm for finding an element in a sorted list or array by repeatedly dividing the search interval in half.

🧠 Preconditions
The array or list must be sorted (in ascending or descending order).

Otherwise, binary search won’t work correctly.

🛠️ How It Works (Step-by-step)
Initialize pointers:

start = 0

end = len(array) - 1

Iterative Search:

While start <= end:

Compute mid = (start + end) // 2

Compare array[mid] with target:

If array[mid] == target: Return mid

If target < array[mid]: Search in the left half, so set end = mid - 1

If target > array[mid]: Search in the right half, so set start = mid + 1

If not found, return -1

🧪 Python Code: Iterative Version
python
Copy
Edit
def binary_search(arr, target):
    start = 0
    end = len(arr) - 1

    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == target:
            return mid
        elif target < arr[mid]:
            end = mid - 1
        else:
            start = mid + 1

    return -1
🧪 Python Code: Recursive Version
python
Copy
Edit
def binary_search_recursive(arr, target, start, end):
    if start > end:
        return -1

    mid = (start + end) // 2

    if arr[mid] == target:
        return mid
    elif target < arr[mid]:
        return binary_search_recursive(arr, target, start, mid - 1)
    else:
        return binary_search_recursive(arr, target, mid + 1, end)
⏱️ Time Complexity
Case	Time Complexity
Best	O(1)
Average	O(log n)
Worst	O(log n)

📦 Space Complexity
Iterative: O(1)

Recursive: O(log n) (due to recursion stack)

🧠 Important Points / Expert Insights
Faster than linear search: Because it eliminates half the search space at each step.

Only works on sorted arrays. Always check if the list is sorted before using binary search.

Safe mid calculation: Use mid = start + (end - start) // 2 to prevent overflow in some languages (not an issue in Python, but good practice).

Variants:

Find first occurrence

Find last occurrence

Find count of a given element

Find floor or ceiling

🧩 Common Use Cases
Searching in sorted arrays/lists

Binary search on answer technique (used in optimization problems)

Searching in rotated sorted arrays

Applied in many algorithms (e.g., lower bound, upper bound in C++ STL)

📘 Example
python
Copy
Edit
arr = [10, 20, 30, 40, 50, 60]
target = 40
result = binary_search(arr, target)
print(result)  # Output: 3 (index of 40)
❗ Debugging Tips
Check for infinite loops: Ensure start and end are updated correctly.

Off-by-one errors are common. Trace how start, end, and mid change.

Always return -1 if not found (not None or something else).